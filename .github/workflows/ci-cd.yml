# GitHub Actions CI/CD 工作流配置
# 这个文件定义了自动化构建、测试和部署流程

name: CI/CD Pipeline

# 触发条件：当代码推送到main分支或创建Pull Request时触发
on:
  push:
    branches: [main, a6] # 推送到main或a6分支时触发
  pull_request:
    branches: [main] # 向main分支创建PR时触发

# 定义环境变量，在整个工作流中都可以使用
env:
  NODE_VERSION: "18" # Node.js版本
  NPM_CACHE_FOLDER: ~/.npm # npm缓存目录

# 定义工作流任务
jobs:
  # 任务1：代码质量检查
  lint-and-test:
    name: Lint & Test
    runs-on: ubuntu-latest # 在Ubuntu最新版本上运行

    steps:
      # 步骤1：检出代码
      - name: Checkout code
        uses: actions/checkout@v4 # 使用官方checkout action
        with:
          fetch-depth: 0 # 获取完整历史，用于版本信息

      # 步骤2：设置Node.js环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }} # 使用环境变量中的Node版本
          cache: "npm" # 启用npm缓存，加速依赖安装

      # 步骤3：安装依赖
      - name: Install dependencies
        run: |
          npm ci  # 使用ci而不是install，确保依赖版本一致
          echo "Dependencies installed successfully"

      # 步骤4：代码格式检查
      - name: Lint code
        run: |
          echo "Running ESLint..."
          npm run lint  # 运行ESLint检查代码质量
          echo "Linting completed"

      # 步骤5：运行测试
      - name: Run tests
        run: |
          echo "Running tests..."
          npm test  # 运行测试套件
          echo "Tests completed"

      # 步骤6：构建项目
      - name: Build project
        run: |
          echo "Building project..."
          npm run build  # 构建生产版本
          echo "Build completed"

      # 步骤7：上传构建产物
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files # 构建产物名称
          path: build/ # 上传build目录
          retention-days: 7 # 保留7天

  # 任务2：安全扫描
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-test # 依赖lint-and-test任务完成

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      # 运行npm audit检查安全漏洞
      - name: Run security audit
        run: |
          echo "Running security audit..."
          npm audit --audit-level=moderate  # 检查中等及以上级别的安全漏洞
          echo "Security audit completed"

  # 任务3：部署到测试环境
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan] # 依赖前两个任务
    if: github.ref == 'refs/heads/a6' # 只在a6分支上部署

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      # 部署到Netlify（前端）
      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: "./build" # 部署build目录
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      # 部署到Render（后端）
      - name: Deploy to Render
        run: |
          echo "Triggering Render deployment..."
          # 这里可以添加触发Render部署的API调用
          echo "Backend deployment triggered"

  # 任务4：生产环境部署
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: github.ref == 'refs/heads/main' # 只在main分支上部署
    environment: production # 使用production环境

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      # 生产环境部署
      - name: Deploy to Production
        run: |
          echo "Deploying to production..."
          # 生产环境部署逻辑
          echo "Production deployment completed"

      # 发送部署通知
      - name: Notify deployment
        run: |
          echo "Deployment notification sent"
          # 可以集成Slack、Discord等通知

  # 任务5：数据库迁移（可选）
  database-migration:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      # 运行数据库迁移脚本
      - name: Run database migrations
        run: |
          echo "Running database migrations..."
          # npm run migrate  # 如果有迁移脚本
          echo "Database migrations completed"
        env:
          MONGO_CONNECTION_STRING: ${{ secrets.MONGO_CONNECTION_STRING }}
